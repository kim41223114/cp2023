<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"></pre>
<h1>First</h1>
<p><br/><br/>About</p>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/kim41223114/cp2023</a> (倉儲)<br/><br/></p>
<h1>W3</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">以下為開啟筆記編輯網站之程式:
# cmsite
cmsimde template uses mdecycu/cmsimde as submodule

On Replit:

for cmsite: git submodule update --init --recursive 

for cmsimde_site: cmsimde is as directory not submodule

for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</pre>
<h4><img alt="" height="302" src="/images/螢幕擷取畫面 (195).png" width="537"/></h4>
<h1>w6</h1>
<p></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><img alt="" height="353" src="/images/roc_flag.png" width="530"/></p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">三角函數波形圖程式:{ pkgs }: {
    deps = [
      pkgs.libev
      pkgs.gnuplot
      pkgs.ncurses.dev
      pkgs.gd
    ];
  env = {
    PYTHON_LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [
      pkgs.libev
    ];
  };
}</pre>
<p><br/><br/><img alt="" height="203" src="/images/gnuplot_ex1.png" width="406"/></p>
<p><img alt="" height="224" src="/images/螢幕擷取畫面 (196).png" width="398"/></p>
<h1>W9(嘗試遠端連結S1511)</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">以下是使用遠端IPV6的連結練習
Microsoft Windows [版本 10.0.22621.2428]
(c) Microsoft Corporation. 著作權所有，並保留一切權利。

C:\Users\kim&gt;ssh cp41223114@s1511.cycu.org
cp41223114@s1511.cycu.org's password:
Permission denied, please try again.
cp41223114@s1511.cycu.org's password:
Connection closed by 2001:288:6004:17:2023:cad:0:1 port 22

C:\Users\kim&gt;ssh cp41223114@s1511.cycu.org
cp41223114@s1511.cycu.org's password:
Permission denied, please try again.
cp41223114@s1511.cycu.org's password:
Permission denied, please try again.
cp41223114@s1511.cycu.org's password:
cp41223114@s1511.cycu.org: Permission denied (publickey,password).

C:\Users\kim&gt;
C:\Users\kim&gt;ssh cp41223114@s1511.cycu.org
cp41223114@s1511.cycu.org's password:
Permission denied, please try again.
cp41223114@s1511.cycu.org's password:
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-86-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Oct 31 08:06:16 AM UTC 2023

  System load:             0.02197265625
  Usage of /:              13.1% of 97.87GB
  Memory usage:            5%
  Swap usage:              0%
  Processes:               555
  Users logged in:         49
  IPv6 address for enp0s3: 2001:288:6004:17:a00:27ff:febe:b3b8
  IPv6 address for enp0s3: 2001:288:6004:17:2023:cad:0:1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


*** System restart required ***
Last login: Tue Oct 31 06:56:04 2023 from 2001:288:6004:17:7c8e:d0c6:372c:eca3
cp41223114@s1511:~$ ssh cp41223114@s1511.cycu.org
The authenticity of host 's1511.cycu.org (2001:288:6004:17:2023:cad:0:1)' can't be established.
ED25519 key fingerprint is SHA256:hP1e8xDIxGx7Empt60IyHtcxdC7Hi4aQPlJJGtb1ugs.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added 's1511.cycu.org' (ED25519) to the list of known hosts.
cp41223114@s1511.cycu.org's password:
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-86-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Oct 31 08:09:08 AM UTC 2023

  System load:             0.03759765625
  Usage of /:              13.1% of 97.87GB
  Memory usage:            5%
  Swap usage:              0%
  Processes:               556
  Users logged in:         49
  IPv6 address for enp0s3: 2001:288:6004:17:a00:27ff:febe:b3b8
  IPv6 address for enp0s3: 2001:288:6004:17:2023:cad:0:1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


*** System restart required ***
Last login: Tue Oct 31 08:06:22 2023 from 2001:288:6004:17:dc23:b200:834e:af34
cp41223114@s1511:~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/cp41223114/.ssh/id_rsa): id_rsa
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in id_rsa
Your public key has been saved in id_rsa.pub
The key fingerprint is:
SHA256:jSCgFoauz022wRZTM72syFTN3AUOtgG/bIvrF3LuRBM cp41223114@s1511
The key's randomart image is:
+---[RSA 3072]----+
|.o.   .*+..o.    |
|o...  =o==.      |
|o.  .o.+E..      |
|..  +. oo=       |
|.  + + .S .      |
|.   O o+oo       |
| o = o.+o.       |
|  o o  oo        |
|     .oo.        |
+----[SHA256]-----+
cp41223114@s1511:~$ &gt;1s -1
-1: command not found
cp41223114@s1511:~$ -1s -1
-1s: command not found
cp41223114@s1511:~$ mkdir tmp
cp41223114@s1511:~$ client_loop: send disconnect: Connection reset

C:\Users\kim&gt; cd .ssh

C:\Users\kim\.ssh&gt;
C:\Users\kim\.ssh&gt;~/ .ssh$
'~' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\kim\.ssh&gt;ssh cp41223114@s1511.cycu.org
cp41223114@s1511.cycu.org's password:
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-86-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Oct 31 09:20:25 AM UTC 2023

  System load:             0.0
  Usage of /:              13.2% of 97.87GB
  Memory usage:            3%
  Swap usage:              0%
  Processes:               285
  Users logged in:         11
  IPv6 address for enp0s3: 2001:288:6004:17:a00:27ff:febe:b3b8
  IPv6 address for enp0s3: 2001:288:6004:17:2023:cad:0:1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


*** System restart required ***
Last login: Tue Oct 31 08:09:13 2023 from 2001:288:6004:17:2023:cad:0:1
cp41223114@s1511:~$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/cp41223114/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/cp41223114/.ssh/id_rsa
Your public key has been saved in /home/cp41223114/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:aiF/FZzqNVDdkXwoWM6nmMrNsiU/VZMPwn3RMxX3JHI cp41223114@s1511
The key's randomart image is:
+---[RSA 3072]----+
|          .+ooE=B|
|         o.+oo=*=|
|        . +.oo.o=|
|         o +oo* .|
|    . . S * .o = |
|     o = * ..   .|
|      + B +.     |
|     . . *.      |
|        . ..     |
+----[SHA256]-----+
cp41223114@s1511:~$ cd ssh
-bash: cd: ssh: No such file or directory
cp41223114@s1511:~$ cd .ssh
cp41223114@s1511:~/.ssh$ client_loop: send disconnect: Connection reset

C:\Users\kim\.ssh&gt;

以下是tmp的連結練習(遠端)
C:\tmp&gt;sftp 41223114@s1511.cycu.org
41223114@s1511.cycu.org's password:
Permission denied, please try again.
41223114@s1511.cycu.org's password:
Connection reset by 2001:288:6004:17:2023:cad:0:1 port 22
Connection closed

C:\tmp&gt;sftp 41223114@s1511.cycu.org
ssh: connect to host s1511.cycu.org port 22: Connection timed out
Connection closed

C:\tmp&gt;
C:\tmp&gt;sftp 41223114@s1511.cycu.org
ssh: connect to host s1511.cycu.org port 22: Connection timed out
Connection closed

C:\tmp&gt;sftp 41223114@s1511.cycu.org
ssh: connect to host s1511.cycu.org port 22: Connection timed out
Connection closed

目前未能完成連結
可能原因為以下幾點:
       1.第一分頁之程式尚未完成(可能性很低)
       2.因為需要IPV6才能完成 本人於112/11/1來到電腦教室聯結網線並開啟proxy以連結IPV6 但是打入密碼一樣未成功 有可能是老師不在所以沒有開啟資料庫來使用 因此連結未成功
       3.使用遠端插網線進不去 可是我也試過近端 一樣沒用 所以這點可能性也很低(以上是這次失敗總結 等下次上課再嘗試)</pre>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">更 我終於成功了</pre>
<p></p>
<h1>W11(使用瀏覽器開啟國旗檔)</h1>
<p><img alt="" height="266" src="/images/螢幕擷取畫面 (81).png" width="473"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">目前成功使用shells開啟C語言</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">並使用瀏覽器檢視其檔案(hello gd)</pre>
<p><img alt="" height="265" src="/images/螢幕擷取畫面 (84).png" width="472"/></p>
<p></p>
<h1>W13(開啟github倉儲)</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">經過我不懈的努力，github的倉儲才被我叫出來</pre>
<p><img alt="" height="262" src="/images/螢幕擷取畫面 (91).png" width="466"/></p>
<p></p>
<h1>學期心得</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">心得:
       這些課程學習到的東西對於我來說相當新鮮，但正因為這些內容實在是太新鮮了，以至於我在學習的過程中常常只懂得依樣畫葫蘆，但即使如此，我還是嘗試好多次，才有了以上的成果，但我希望上課內容可以先和學員普及其中運作的原理，預留較多的時間才能真正學習好內容。</pre>
<h1>putty使用</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">步驟1:使用puttygen.exe定位主機位置並獲得key(點擊Generate開始定位)

如圖:(鼠標需在其檔案頁面範圍內不斷移動直到綠條跑完)






</pre>
<p><img alt="" height="371" src="/images/putty step1.png" width="530"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">將key(圖上藍色框選的亂碼)複製新增到自己倉儲帳號(設定-SSH keys)，同時也要點圖上的Save private key

儲存到tinyc-data-home(名稱學號)

貼至倉儲綁定的亂碼就是自己設的鎖，而鑰匙就是儲存至自己的USB中的.ppk檔</pre>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">步驟2:使用putty.exe把要鑰匙與倉儲座連接</pre>
<p><img alt="" height="321" src="/images/putty step2.png" width="393"/></p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">至SSH裡的Auth裡的Credentials，將.ppk檔數入

</pre>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">步驟3:在命令字元打上reedit，尋找到剛剛處存的key整個目錄檔後右鍵匯出至USB中</pre>
<p><img alt="" height="209" src="/images/putty step3.png" width="273"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">字元指令至(cd)自己要克隆抓取後放置的位置

輸入git clone --recurse-submodules git@41223114:zhe41223114/cp2023.git

(上述粗體字前者為.ppk檔案名:後者為倉儲帳號)

將倉儲資料複製到USB，之後cd進cp2023(克隆下的資料檔名)

輸入cms 就可開啟近端網站進行維護了</pre>
<p><br/><br/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">目前已使用putty將鎖頭與鎖設定完成(ppk檔案)</pre>
<p><img alt="" height="272" src="/images/螢幕擷取畫面 (156).png" width="484"/></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>